~~
~~ Copyright (C) 2013-2015 shadowhunt (dev@shadowhunt.de)
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~         http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

 ------
 Introduction
 ------
 Shadowhunt
 ------

Shadowhunt Subversion Library

    The Shadowhunt Subversion project provides a simple <<<JAVA>>> interface
    to {{{http://subversion.apache.org/}Subversion}} servers through
    <<<http>>> or <<<https>>> interface.

    The main purpose of this library is to access and manipulate a subversion
    repository without having to checkout the repository to the local system
    first. Its API is based on the command lines <<<svn>>> tool.

* Usage

+-----+
CredentialsProvider cp = new BasicCredentialsProvider();
Credentials credentials = new UsernamePasswordCredentials(USERNAME, PASSWORD);
cp.setCredentials(AuthScope.ANY, credentials);

DefaultHttpClient client = new DefaultHttpClient();
client.setCredentialsProvider(cp);
client.setHttpRequestRetryHandler(new SubversionRequestRetryHandler());

HttpContext context = new BasicHttpContext();

URIBuilder builder = new URIBuilder();
URI uri = builder //
   .setScheme("http")//
   .setHost("scm.example.net") //
   .setPort(8080)
   .setPath("/svn/test-repo/trunk") //
   .build();

RepositoryFactory factory = RepositoryFactory.getInstance();
Repository repository = factory.createRepository(uri, client, context, true);

Transaction transaction = repository.createTransaction();
try { // adding new files
    InputStream file1 = ...;
    repository.add(transaction, Resource.create("/folder/file1.txt"), true, file1);
    InputStream file2 = ...;
    repository.add(transaction, Resource.create("/folder/file2.txt"), true, file2);
    Resource sourceFile = Resource.create("/folder/source.txt");
    if (repository.exists(sourceFile, Revision.HEAD)) {
        repository.move(transaction, sourceFile, Resource.create("/folder/target.txt"), false);
    }
    repository.commit(transaction, "adding 2 files, renaming 1");
} catch (SubversionException se) {
    repository.rollback(transaction);
}
+-----+
