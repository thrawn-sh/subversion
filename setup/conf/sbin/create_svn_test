#!/bin/bash

VERSION="${1}"; shift
if [ -z "${VERSION}" ]; then
	echo "VERSION not set" 1>&2
	exit 1;
fi
SVN="/opt/bin/svn_${VERSION}"
if [ ! -f "${SVN}" ]; then
	echo "${SVN} not found" 1>&2
	exit 1;
fi
SVNADMIN="/opt/bin/svnadmin_${VERSION}"
if [ ! -f "${SVNADMIN}" ]; then
	echo "${SVNADMIN} not found" 1>&2
	exit 1;
fi

TMP_DIR="`mktemp -d`"
LOCAL="${TMP_DIR}/local"
DUMP="${TMP_DIR}/dump"
BASE="${LOCAL}/trunk/00000000-0000-0000-0000-000000000000"

REPO="${TMP_DIR}/svn"

create_file() { #{{{1
	local file="${1}"; shift
	local delete="${1}"; shift

	mkdir -p `dirname "${file}"`
	touch "${file}"
	add   "${file}"
	local content
	for content in A B C; do
		echo "${content}" >                                        "${file}"
		"${SVN}" propset --quiet svn:mime-type        text/plain   "${file}"
		"${SVN}" propset --quiet modifiedProperty     "${content}" "${file}"
		"${SVN}" propset --quiet "property${content}" "${content}" "${file}"
		commit "${file} with content: ${content}"
	done

	if [ "${delete}" -eq 1 ]; then
		# copy
		local copy="`echo ${file} | sed 's:delete:copy:g'`"
		"${SVN}" copy "${file}"  "${copy}"
		add                      "${copy}"
		commit "copied ${file} -> ${copy}"
		# move
		local tmp="`echo ${file} | sed 's:delete:tmp:g'`"
		local move="`echo ${file} | sed 's:delete:move:g'`"
		"${SVN}" copy "${file}"  "${tmp}"
		add                      "${tmp}"
		commit "copied ${file} -> ${tmp}"
		"${SVN}" mv "${tmp}"   "${move}"
		add                    "${move}"
		commit "moved ${tmp} -> ${move}"
		# delete
		rm -f "${file}"
		"${SVN}" remove --quiet  "${file}"
		commit "deleted ${file}" "${file}"
	fi
} #}}}1
create_folder() { #{{{1
	local folder="${1}"; shift
	local delete="${1}"; shift

	mkdir -p "${folder}"
	add                                              "${folder}"
	"${SVN}" propset --quiet svn:ignore      "*.bin" "${folder}"
	"${SVN}" propset --quiet chustomProperty "test"  "${folder}"
	commit "created ${folder}"                       "${folder}"

	if [ "${delete}" -eq 1 ]; then
		# copy
		local copy="`echo ${folder} | sed 's:delete:copy:g'`"
		"${SVN}" copy "${folder}"  "${copy}"
		add                        "${copy}"
		commit "copied ${folder} -> ${copy}"
		# move
		local tmp="`echo ${folder} | sed 's:delete:tmp:g'`"
		local move="`echo ${folder} | sed 's:delete:move:g'`"
		"${SVN}" copy "${folder}"  "${tmp}"
		add                        "${tmp}"
		commit "copied ${folder} -> ${tmp}"
		"${SVN}" mv "${tmp}"   "${move}"
		add                    "${move}"
		commit "moved ${tmp} -> ${move}"
		# delete
		rm -rf "${folder}"
		"${SVN}" remove --quiet    "${folder}"
		commit "deleted ${folder}" "${folder}"
	fi
} #}}}1

add() { #{{{1
	local resource="${1}"; shift
	case "${VERSION}" in
		"1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0")
			if [ "${LOCAL}" == "${resource}" ]; then
				return
			fi
			local parent="`dirname "${resource}"`"
			add "${parent}"
			"${SVN}" add --non-recursive --quiet --force "${resource}"
		;;
		*)
			"${SVN}" add --non-recursive --quiet --force --parents "${resource}"
		;;
	esac
} #}}}1
commit() { #{{{1
	local message="${1}"; shift
	message=`echo "${message}" | sed "s:${LOCAL}::g"`

	"${SVN}" commit --message "${message}" "${LOCAL}"

	local version=`"${SVN}" info "file://${REPO}" | grep ^Revision: | awk '{print $2}'`
	local src
	while IFS= read -r -d $'\0' src; do
		local target="`echo "${src}" | sed "s:^${LOCAL}:${DUMP}/${version}:g"`"
		if [ -d "${src}" ]; then
			mkdir -p "${target}"
		else
			cp "${src}" "${target}"
		fi
		if [ "${target}" = "${DUMP}/${version}" ]; then
			target="${target}/ROOT"
		fi

		local rsrc="`echo ${src} | sed 's:%:%25:g' | sed 's: :%20:g' | sed 's:\^:%5e:g' | sed "s:^${LOCAL}:file\://${REPO}:g"`"
		"${SVN}" log --xml "${rsrc}" | xmllint --format - | sed "s:${REPO}::g" | sed -E "s:[0-9]{3}Z</date>:Z</date>:g" > "${target}.log"
		info               "${rsrc}"                                                                                      "${target}.info"
		proplist           "${rsrc}"                                                                                      "${target}.proplist"
	done < <(find "${LOCAL}" -not -wholename "*/.svn*" -print0)
} #}}}1
info() { #{{{1
	local resource="${1}"; shift
	local output="${1}"; shift
	local bin="NOT_DIFINED"
	case "${VERSION}" in
		"1.0.0" | "1.1.0" | "1.2.0")
			bin="/opt/bin/svn_1.3.0"
		;;
		*)
			bin="${SVN}"
		;;
	esac
	"${bin}" info --xml "${resource}" | xmllint --format - | sed "s:${REPO}::g" | sed -E "s:[0-9]{3}Z</date>:Z</date>:g" > "${output}"
} #}}}1
proplist() { #{{{1
	local resource="${1}"; shift
	local output="${1}"; shift
	case "${VERSION}" in
		"1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0")
			bin="/opt/bin/svn_1.5.0"
		;;
		*)
			bin="${SVN}"
		;;
	esac
	"${bin}" proplist --verbose --xml "${resource}" | xmllint --format - | sed "s:${REPO}::g" > "${output}"
} #}}}1

### init {{{1
mkdir -p "${REPO}" "${DUMP}"

"${SVNADMIN}" create "${REPO}"
"${SVN}" checkout --quiet "file://${REPO}" "${LOCAL}"

### prepare repo {{{1
mkdir -p "${BASE}"
mkdir -p "${LOCAL}/branches"
mkdir -p "${LOCAL}/tags"
add "${BASE}"
add "${LOCAL}/branches"
add "${LOCAL}/tags"
commit "create structure"

# copy {{{1
create_file   "${BASE}/copy/file.txt" 0
create_file   "${BASE}/copy/file_delete.txt" 1
create_folder "${BASE}/copy/folder" 0
create_folder "${BASE}/copy/folder_delete" 1

# download {{{1
create_file "${BASE}/download/file.txt" 0
create_file "${BASE}/download/file_delete.txt" 1

# exists {{{1
create_file   "${BASE}/exists/file.txt" 0
create_file   "${BASE}/exists/file_delete.txt" 1
create_folder "${BASE}/exists/folder" 0
create_folder "${BASE}/exists/folder_delete" 1

# info {{{1
# TODO properties
create_file   "${BASE}/info/file.txt" 0
create_file   "${BASE}/info/file_delete.txt" 1
create_folder "${BASE}/info/folder" 0
create_folder "${BASE}/info/folder_delete" 1

# list {{{1
create_file   "${BASE}/list/file.txt" 0
create_file   "${BASE}/list/file_delete.txt" 1
create_folder "${BASE}/list/folder" 0
create_folder "${BASE}/list/folder_delete" 1

# lock {{{1
mkdir -p      "${BASE}/lock"
echo A >      "${BASE}/lock/file.txt"
add           "${BASE}/lock/file.txt"
commit        "${BASE}/lock/file.txt with content: A"
echo B >      "${BASE}/lock/file.txt"
"${SVN}" lock "${BASE}/lock/file.txt"
commit        "${BASE}/lock/file.txt with content: B + lock"

# log {{{1
create_file   "${BASE}/log/file.txt" 0
create_file   "${BASE}/log/file_delete.txt" 1

# encoding {{{1
# utf8
create_file   "${BASE}/encoding/file_日本国.txt" 0
create_folder "${BASE}/encoding/folder_中华人民共和国" 0

# xml
create_file   "${BASE}/encoding/file_<&>'\".txt" 0
create_folder "${BASE}/encoding/folder_<&>'\"" 0

# uri
create_file   "${BASE}/encoding/file ^%.txt" 0
create_folder "${BASE}/encoding/folder ^%" 0

# combinded
create_file   "${BASE}/encoding/file_日本国_<&>'\"_ ^%.txt" 0
create_folder "${BASE}/encoding/folder_中华人民共和国_<&>'\"_ ^%" 0

# custom properties with namespace name {{{1
mkdir -p                                          "${BASE}/namespace_properties"
touch                                             "${BASE}/namespace_properties/file.txt"
add                                               "${BASE}/namespace_properties/file.txt"
"${SVN}" propset --quiet "namespace:name" "value" "${BASE}/namespace_properties/file.txt"
commit                                            "${BASE}/namespace_properties/file.txt with namespace:name property"

### package {{{1
cd "${TMP_DIR}"
for i in dump svn; do
	zip_file="${i}.zip"
	zip --quiet --recurse-paths "${zip_file}" "${i}"
	md5sum  "${zip_file}" > "${zip_file}.md5"
	sha1sum "${zip_file}" > "${zip_file}.sha1"
done

chown -R www-data:www-data ${REPO}
mv svn test

### create empty repository {{{1
"${SVNADMIN}" create "${TMP_DIR}/empty"
chown -R www-data:www-data "${TMP_DIR}/empty"

### cleanup {{{1
rm -rf        /tmp/svn-"${VERSION}"
mv ${TMP_DIR} /tmp/svn-"${VERSION}"
chmod 0755    /tmp/svn-"${VERSION}"
rm -rf        /tmp/svn-"${VERSION}/dump"
